import { useState, useCallback, useEffect } from 'react';
import type { RequestHistoryData } from '../services/api';
import { apiService } from '../services/api';

export type RequestHistory = RequestHistoryData;

export const useRequestHistory = () => {
  const [history, setHistory] = useState<RequestHistory[]>([]);
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  // Fetch history from backend
  const fetchHistory = useCallback(async () => {
    setLoading(true);
    setError(null);
    try {
      console.log('Fetching history from API...');
      const response = await apiService.getHistory();
      console.log('History response:', response);
      
      // The response should be a ListResponse<RequestHistoryData>
      if (response && Array.isArray(response.items)) {
        setHistory(response.items);
      } else {
        console.error('Unexpected response format:', response);
        setError('Received invalid data from server');
      }
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Unknown error';
      console.error('Error fetching history:', errorMessage, err);
      setError(`Network error: ${errorMessage}`);
    } finally {
      setLoading(false);
    }
  }, []);

  // Save a new request to history
  const saveRequest = useCallback(async (requestData: Omit<RequestHistory, 'id' | 'created_at'>) => {
    try {
      // Create the data to save with required fields
      const dataToSave: RequestHistory = {
        ...requestData,
        id: 0, // Will be generated by the database
        created_at: new Date().toISOString()
      };
      
      const response = await apiService.saveRequest(dataToSave);
      if (response.success) {
        // Refresh the history after saving
        await fetchHistory();
        return { success: true };
      } else {
        throw new Error(response.error || 'Failed to save request');
      }
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'An error occurred';
      setError(errorMessage);
      return { success: false, error: errorMessage };
    }
  }, [fetchHistory]);

  // Load history when component mounts
  useEffect(() => {
    fetchHistory();
  }, [fetchHistory]);

  return {
    history,
    loading,
    error,
    saveRequest,
    refreshHistory: fetchHistory
  };
};
